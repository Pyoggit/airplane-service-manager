-- 승객 로그인 테이블
CREATE TABLE CUSTOMER (
    NO CHAR(7),                            -- PK
    NAME VARCHAR2(20) NOT NULL,            -- 이름
    BIRTH DATE,                            -- 생일(ex)20020707)
    PHONE VARCHAR2(15),                    -- UK 휴대폰번호
    REGIST DATE NOT NULL,                  -- 등록날짜 SYSDATE 
    RIGHT NUMBER(1) DEFAULT 0,             -- 권한
    ID VARCHAR2(20) NOT NULL,              -- UK 아이디
    PW VARCHAR2(20) NOT NULL,              -- PW 패스워드
    C_COUNT NUMBER(3) DEFAULT 0            -- 예매 합계 (BOOKING 테이블에서 INSERT 시 계수)
);

-- 관리자 계정 추가하는 쿼리문
INSERT INTO CUSTOMER(NO, NAME, REGIST, ID, PW, "RIGHT")
VALUES ('0000001', 'admin', SYSDATE, 'admin', 'admin', '1');

ALTER TABLE CUSTOMER ADD CONSTRAINT CUSTOMER_NO_PK PRIMARY KEY(NO);
ALTER TABLE CUSTOMER ADD CONSTRAINT CUSTOMER_PHONE_UQ UNIQUE(PHONE);
ALTER TABLE CUSTOMER ADD CONSTRAINT CUSTOMER_ID_UQ UNIQUE(ID);
COMMIT;

-- 예약 합계 증가 트리거
CREATE OR REPLACE TRIGGER COUNT_UP_TRG
AFTER INSERT ON BOOKING
FOR EACH ROW
BEGIN
    UPDATE CUSTOMER
    SET C_COUNT = C_COUNT + 1
    WHERE NO = :NEW.CUSTOMER_NO;
END;
/

-- 예약 합계 감소 트리거
CREATE OR REPLACE TRIGGER COUNT_DOWN_TRG
AFTER DELETE ON BOOKING
FOR EACH ROW
BEGIN
    UPDATE CUSTOMER
    SET C_COUNT = C_COUNT - 1
    WHERE NO = :OLD.CUSTOMER_NO;
END;
/

-- 여객기 정보 테이블
CREATE TABLE PLANE (
    NO CHAR(5),                          -- PK
    NAME VARCHAR2(15) NOT NULL,          -- 기종
    ROWX NUMBER(2) NOT NULL,             -- 좌석의 행 개수
    COLY NUMBER(2) NOT NULL,             -- 좌석의 열 개수
    SEATS NUMBER(3)                      -- 총 좌석 개수 (트리거로 생성)
);
ALTER TABLE PLANE ADD CONSTRAINT PLANE_NO_PK PRIMARY KEY(NO);

-- 여객기 정보 입력 테스트용
INSERT INTO PLANE (NO, NAME, ROWX, COLY)
VALUES ('00002', '대한항공', 10, 6);
COMMIT;

-- 비행기 좌석 정보 테이블
CREATE TABLE SEATS (
    NO CHAR(6),                          -- PK
    PLANE_NO CHAR(5),                    -- 비행기 기종 NO FK
    ROWX VARCHAR2(2) NOT NULL,           -- 행 코드 01~99
    COLY VARCHAR2(2) NOT NULL            -- 열 코드 A...Z
);
ALTER TABLE SEATS ADD CONSTRAINT SEATS_NO_PK PRIMARY KEY(NO);
ALTER TABLE SEATS ADD CONSTRAINT SEATS_PLANE_NO_FK FOREIGN KEY(PLANE_NO) REFERENCES PLANE(NO) ON DELETE CASCADE;

-- 나라별 항공 정보 테이블
CREATE TABLE COUNTRY (
    NO CHAR(5),                          -- PK
    NAME VARCHAR2(15) NOT NULL,          -- 이름 (UK, 중복 불가)
    DISTANCE NUMBER(5) NOT NULL,         -- 거리
    HOUR NUMBER(4,2)                     -- 소요 시간
);
ALTER TABLE COUNTRY ADD CONSTRAINT COUNTRY_NO_PK PRIMARY KEY(NO);
ALTER TABLE COUNTRY ADD CONSTRAINT COUNTRY_NAME_UK UNIQUE(NAME);

-- 나라정보 입력 테스트용
INSERT INTO COUNTRY (NO, NAME, DISTANCE)
VALUES ('00002', '호주', 8290);
COMMIT;

-- 비행 거리만큼 비행 소요 시간 계산해주는 트리거
CREATE OR REPLACE TRIGGER COUNTRY_HOUR_TRG
BEFORE INSERT OR UPDATE ON COUNTRY
FOR EACH ROW
BEGIN
    -- 평균 속도 900 km/h
    :NEW.HOUR := :NEW.DISTANCE / 900;
END;
/

-- 여행국 코드 시퀀스 생성
CREATE SEQUENCE COUNTRY_SEQ
START WITH 1
INCREMENT BY 1
NOCACHE;

-- 항공편 정보 테이블
CREATE TABLE FLIGHT (
    NO CHAR(5),                          -- PK
    PLANE_NO CHAR(5) NOT NULL,           -- 비행기 기종 NO FK
    DEPARTURE_COUNTRY_NO CHAR(5) DEFAULT '00001', -- DEFAULT KOREA, 출발 국가
    ARRIVAL_COUNTRY_NO CHAR(5) NOT NULL, -- 도착 국가
    PRICE NUMBER(8),                     -- 가격
    DEPARTURE_HOUR DATE NOT NULL,        -- 출발 시간
    ARRIVAL_HOUR DATE                    -- 도착 시간
);
ALTER TABLE FLIGHT ADD CONSTRAINT FLIGHT_NO_PK PRIMARY KEY(NO);
ALTER TABLE FLIGHT ADD CONSTRAINT FLIGHT_PLANE_NO_FK FOREIGN KEY(PLANE_NO) REFERENCES PLANE(NO) ON DELETE CASCADE;
ALTER TABLE FLIGHT ADD CONSTRAINT FLIGHT_DEPARTURE_COUNTRY_NO_FK FOREIGN KEY(DEPARTURE_COUNTRY_NO) REFERENCES COUNTRY(NO) ON DELETE SET NULL;
ALTER TABLE FLIGHT ADD CONSTRAINT FLIGHT_ARRIVAL_COUNTRY_NO_FK FOREIGN KEY(ARRIVAL_COUNTRY_NO) REFERENCES COUNTRY(NO) ON DELETE SET NULL;

-- 항공편 입력 테스트용
INSERT INTO FLIGHT (NO, PLANE_NO, DEPARTURE_COUNTRY_NO, ARRIVAL_COUNTRY_NO, PRICE, DEPARTURE_HOUR, ARRIVAL_HOUR)
VALUES ('00001', '00001', '00001', '00002', 1000000, TO_DATE('2024-12-05 14:00', 'YYYY-MM-DD HH24:MI'), TO_DATE('2024-12-05 20:00', 'YYYY-MM-DD HH24:MI'));

-- 시간 대비 가격 자동 계산 트리거
CREATE OR REPLACE TRIGGER FLIGHT_PRICE_TRIGGER
BEFORE INSERT ON FLIGHT
FOR EACH ROW
DECLARE
    SHOUR NUMBER(4.2);
BEGIN
    SELECT HOUR INTO SHOUR FROM COUNTRY C WHERE C.NO = :NEW.ARRIVAL_COUNTRY_NO;
    :NEW.PRICE := SHOUR * 150000;
END;
/

-- 시간 대비 도착 시간 자동 계산 트리거
CREATE OR REPLACE TRIGGER FLIGHT_ARRIVAL_TRG
BEFORE INSERT ON FLIGHT
FOR EACH ROW
DECLARE
    SHOUR NUMBER(4.2);
BEGIN
    SELECT HOUR INTO SHOUR FROM COUNTRY C WHERE C.NO = :NEW.ARRIVAL_COUNTRY_NO;
    :NEW.ARRIVAL_HOUR := :NEW.DEPARTURE_HOUR + (SHOUR / 24);
END;
/

-- 예매 정보 테이블
CREATE TABLE BOOKING (
    NO CHAR(7),                          -- PK
    GROUP_NO CHAR(6) NOT NULL,           -- 예매 그룹 NO
    CUSTOMER_NO CHAR(7) NOT NULL,        -- 고객 NO FK
    FLIGHT_NO CHAR(5) NOT NULL,          -- 항공편 NO FK
    CODE CHAR(20),                       -- CODE NO-CUSTOMER_NO-FLIGHT_NO 로 생성 트리거
    SEAT VARCHAR2(4) NOT NULL,           -- 좌석
    SEATS_NO CHAR(6),                    -- 입력된 좌석에 맞춰서 좌석번호 가져오게 FK 트리거
    BOOKING_DATE DATE NOT NULL           -- 예매 날짜
);
ALTER TABLE BOOKING ADD CONSTRAINT BOOKING_NO_PK PRIMARY KEY(NO);
ALTER TABLE BOOKING ADD CONSTRAINT BOOKING_SEATS_NO_FK FOREIGN KEY(SEATS_NO) REFERENCES SEATS(NO) ON DELETE CASCADE;
ALTER TABLE BOOKING ADD CONSTRAINT BOOKING_CUSTOMER_NO_FK FOREIGN KEY(CUSTOMER_NO) REFERENCES CUSTOMER(NO) ON DELETE SET NULL;
ALTER TABLE BOOKING ADD CONSTRAINT BOOKING_FLIGHT_NO_FK FOREIGN KEY(FLIGHT_NO) REFERENCES FLIGHT(NO) ON DELETE CASCADE;

-- BOOKING 입력 또는 업데이트 시 SEAT에 맞춰서 SEATS_NO를 업데이트
CREATE OR REPLACE TRIGGER BOOKING_SEATS_TRG
BEFORE INSERT OR UPDATE ON BOOKING
FOR EACH ROW
DECLARE
    SNO CHAR(6);
BEGIN
    SELECT NO INTO SNO
    FROM SEATS
    WHERE ROWX = SUBSTR(:NEW.SEAT, 1, 2)
      AND COLY = SUBSTR(:NEW.SEAT, 3)
      AND PLANE_NO = (SELECT PLANE_NO FROM FLIGHT WHERE NO = :NEW.FLIGHT_NO);
    :NEW.SEATS_NO := SNO;
END;
/

-- BOOKING INSERT 시 코드 자동 생성
CREATE OR REPLACE TRIGGER BOOKING_INSERT_TRG
BEFORE INSERT ON BOOKING
FOR EACH ROW
BEGIN
    :NEW.CODE := :NEW.GROUP_NO || '-' || :NEW.CUSTOMER_NO || '-' || :NEW.FLIGHT_NO;
END;
/

-- PLANE 추가 시 SEATS TABLE 자동으로 추가
CREATE OR REPLACE TRIGGER PLANE_INSERT_TRG
AFTER INSERT ON PLANE
FOR EACH ROW
DECLARE
    X1 NUMBER;
    X2 NUMBER;
BEGIN
    FOR i IN 1 .. :NEW.ROWX LOOP
        FOR j IN 1 .. :NEW.COLY LOOP
            X1 := ASCII('A') + TRUNC(i / 26);
            X2 := ASCII('A') + MOD(i, 26);
            INSERT INTO SEATS VALUES (
                TO_CHAR((SELECT NVL(MAX(NO), 0) + 1 FROM SEATS), 'FM000000'),
                :NEW.NO,
                CHR(X1) || CHR(X2),
                TO_CHAR(j, 'FM00')
            );
        END LOOP;
    END LOOP;
END;
/
COMMIT;

-- PLANE 테이블 INSERT 시 X, Y에 맞춰서 SEATS 개수 추가
CREATE OR REPLACE TRIGGER PLANE_BEFORE_INSERT_TRG
BEFORE INSERT ON PLANE
FOR EACH ROW
BEGIN
    :NEW.SEATS := :NEW.ROWX * :NEW.COLY;
END;
/

-- BOOKING에 모두 조인한 VIEW
CREATE OR REPLACE VIEW BOOKING_JOIN_ALL_VIEW AS
SELECT DISTINCT B.CUSTOMER_NO, GROUP_NO, B.CODE, C.NAME, P.NAME AS PLANE_NAME,
                DC.NAME AS DEP_COUNTRY, AC.NAME AS ARV_COUNTRY, PRICE,
                DEPARTURE_HOUR, ARRIVAL_HOUR, SEAT, BOOKING_DATE
FROM BOOKING B
JOIN FLIGHT F ON B.FLIGHT_NO = F.NO
JOIN CUSTOMER C ON B.CUSTOMER_NO = C.NO
JOIN COUNTRY DC ON DC.NO = F.DEPARTURE_COUNTRY_NO
JOIN COUNTRY AC ON AC.NO = F.ARRIVAL_COUNTRY_NO
JOIN PLANE P ON P.NO = F.PLANE_NO;
COMMIT;

-- FLIGHT 출력용 뷰
CREATE OR REPLACE VIEW FLIGHT_COUNTRY_JOIN_VIEW AS
SELECT F.NO, REMAIN, F.PLANE_NO, F.ARRIVAL_COUNTRY_NO, F.DEPARTURE_COUNTRY_NO,
       C.NAME AS ARVNAME, C2.NAME AS DEPNAME, F.PRICE, F.DEPARTURE_HOUR, F.ARRIVAL_HOUR
FROM FLIGHT F
LEFT JOIN COUNTRY C ON C.NO = F.ARRIVAL_COUNTRY_NO
LEFT JOIN COUNTRY C2 ON C2.NO = F.DEPARTURE_COUNTRY_NO
JOIN (SELECT FNO, COUNT(*) AS REMAIN
      FROM (SELECT S.NO AS SNO, F.NO AS FNO
            FROM SEATS S
            INNER JOIN FLIGHT F ON S.PLANE_NO = F.PLANE_NO) J
      LEFT JOIN BOOKING B ON B.SEATS_NO = J.SNO
      WHERE CODE IS NULL
      GROUP BY FNO) Q ON Q.FNO = F.NO;

SELECT * FROM BOOKING_JOIN_ALL_VIEW;
SELECT * FROM BOOKING;
COMMIT;

-- SEATS을 LEFT JOIN 후 FLIGHT NO에 해당하는 좌석 출력, BOOKING도 JOIN
SELECT S.ROWX, S.COLY, CUSTOMER_NO, GROUP_NO, CODE, P.COLY AS YNUM
FROM SEATS S
LEFT JOIN BOOKING B ON S.NO = B.SEATS_NO
JOIN PLANE P ON P.NO = S.PLANE_NO
WHERE S.PLANE_NO = (SELECT PLANE_NO FROM FLIGHT WHERE NO = TO_CHAR(2, 'FM00000'))
ORDER BY S.ROWX, S.COLY;

-- flight에 해당하는 잔여 좌석 수 출력해주는 뷰
SELECT FNO, COUNT(*) AS REMAIN
FROM (SELECT S.NO AS SNO, F.NO AS FNO
      FROM SEATS S
      INNER JOIN FLIGHT F ON S.PLANE_NO = F.PLANE_NO) J
LEFT JOIN BOOKING B ON B.SEATS_NO = J.SNO
WHERE CODE IS NULL
GROUP BY FNO;

SELECT * FROM SEATS WHERE PLANE_NO = '00004';

-- 좌석 출력하는 쿼리문
SELECT S.ROWX, S.COLY, CUSTOMER_NO, GROUP_NO, P.COLY AS YNUM
FROM SEATS S
LEFT JOIN BOOKING B ON S.NO = B.SEATS_NO
JOIN PLANE P ON P.NO = S.PLANE_NO
WHERE S.PLANE_NO = (SELECT PLANE_NO FROM FLIGHT F JOIN BOOKING B ON FLIGHT_NO = F.NO)
ORDER BY S.ROWX, S.COLY;